import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
public class BankerAlgorithm {
    private int numProcesses;
    private int numResources;
    private int[][] allocation;
    private int[][] max;
    private int[] available;
    private int[] resources;

    public BankerAlgorithm(int[][] allocation, int[][] max, int[] available) {
        this.numProcesses = allocation.length;
        this.numResources = available.length;
        this.allocation = allocation;
        this.max = max;
        this.available = available;
        this.resources = new int[numResources];
        calculateResources();
    }

    public boolean isSafeState() {
        int[] work = Arrays.copyOf(available, numResources);
        boolean[] finish = new boolean[numProcesses];
        int[] safeSequence = new int[numProcesses];
        int count = 0;

        while (count < numProcesses) {
            boolean found = false;
            for (int i = 0; i < numProcesses; i++) {
                if (!finish[i] && isProcessSafe(i, work)) {
                    for (int j = 0; j < numResources; j++) {
                        work[j] += allocation[i][j];
                    }
                    safeSequence[count++] = i;
                    finish[i] = true;
                    found = true;
                }
            }
            if (!found) {
                return false;
            }
        }
        return true;
    }

    private boolean isProcessSafe(int process, int[] work) {
        for (int i = 0; i < numResources; i++) {
            if (max[process][i] - allocation[process][i] > work[i]) {
                return false;
            }
        }
        return true;
    }

    private void calculateResources() {
        for (int i = 0; i < numResources; i++) {
            int sum = 0;
            for (int j = 0; j < numProcesses; j++) {
                sum += allocation[j][i];
            }
            resources[i] = available[i] - sum;
        }
    }

    public static void main(String[] args) {
        int[][] allocation = {
            {0, 1, 0},
            {2, 0, 0},
            {3, 0, 2},
            {2, 1, 1},
            {0, 0, 2}
        };
        int[][] max = {
            {7, 5, 3},
            {3, 2, 2},
            {9, 0, 2},
            {2, 2, 2},
            {4, 3, 3}
        };
        int[] available = {3, 3, 2};

        BankerAlgorithm bankerAlgorithm = new BankerAlgorithm(allocation, max, available);
        boolean isSafe = bankerAlgorithm.isSafeState();

        if (isSafe) {
            System.out.println("System is in a safe state.");
        } else {
            System.out.println("System is not in a safe state.");
        }
    }
}


public class BankerAlgorithmGUI extends JFrame implements ActionListener {
    private JPanel mainPanel;
    private JTextField[][] allocation;
    private JTextField[][] max;
    private JTextField[] available;
    private JButton calculateButton;
    private JLabel safeSequenceLabel;

    public int numProcesses;
    public  int numResources;

    public BankerAlgorithmGUI() {
        setTitle("Banker's Algorithm");
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(0, 2, 4, 4));
        add(mainPanel);

        // Create input  for number of processes and resources
        JLabel numProcessesLabel = new JLabel("Num Processes:");
        mainPanel.add(numProcessesLabel);
        JTextField numProcessesField = new JTextField();
        mainPanel.add(numProcessesField);

        JLabel numResourcesLabel = new JLabel("Num Resources:");
        mainPanel.add(numResourcesLabel);
        JTextField numResourcesField = new JTextField();
        mainPanel.add(numResourcesField);

        // Create the "Calculate" button
        calculateButton = new JButton("Calculate");
        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                numProcesses = Integer.parseInt(numProcessesField.getText());
                numResources = Integer.parseInt(numResourcesField.getText());

                // Create the input fields for allocation, max, and available resources
                createAllocationFields();
                createMaxFields();
                createAvailableFields();

                // Implement the Banker's algorithm calculation here

                // Update the safe sequence label with the result
                safeSequenceLabel.setText("Safe sequence: P0 -> P1 -> P2");

                revalidate();
                repaint();
            }
        });
        mainPanel.add(calculateButton);

        // Create the safe sequence label
        safeSequenceLabel = new JLabel();
        mainPanel.add(safeSequenceLabel);

        setVisible(true);
    }

    private void createAllocationFields() {
        allocation = new JTextField[numProcesses][numResources];
        JLabel allocationLabel = new JLabel("Allocation:");
        mainPanel.add(allocationLabel);

        for (int i = 0; i < numProcesses; i++) {
            for (int j = 0; j < numResources; j++) {
                allocation[i][j] = new JTextField();
                mainPanel.add(allocation[i][j]);
            }
        }
    }

    private void  createMaxFields() {
        max = new JTextField[numProcesses][numResources];
        JLabel maxLabel = new JLabel("Max:");
        mainPanel.add(maxLabel);

        for (int i = 0; i < numProcesses; i++) {
            for (int j = 0; j < numResources; j++) {
                max[i][j] = new JTextField();
                mainPanel.add(max[i][j]);
            }
        }
    }

    private void createAvailableFields() {
        available= new JTextField[numResources];
        JLabel availableLabel = new JLabel("Available:");
        mainPanel.add(availableLabel);

        for (int i = 0; i < numResources; i++) {
            available[i] = new JTextField();
            mainPanel.add(available[i]);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BankerAlgorithmGUI();
            }
        });
    }
}
